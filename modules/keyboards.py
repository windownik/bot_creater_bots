from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from modules import sqLite

# –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ—Ç–∞–∫—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
send_contact = KeyboardButton(f'–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True)

send_contact_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True).add(send_contact)

# –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
builder = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä', callback_data='builder')
hand_data = InlineKeyboardButton(text='–†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏', callback_data='manual_input')
change_data = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', callback_data='change_data')
back_btn = InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')

admin_kb_start = InlineKeyboardMarkup()
admin_kb_start.add(builder)
admin_kb_start.add(change_data)
admin_kb_start.add(hand_data)

back_kb = InlineKeyboardMarkup()
back_kb.add(back_btn)

# –î–ê—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
send_invoice = InlineKeyboardButton(text='–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', callback_data='send_invoice')
input_password = InlineKeyboardButton(text='–í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å', callback_data='input_password')

noname_start_kb = InlineKeyboardMarkup().add(input_password)
noname_start_kb.add(send_invoice)

# –ó–∞–¥–∞—Ç—å —Ç–∏–ø –∞–∫–∫–∞—É–Ω—Ç–∞
admin_btn = KeyboardButton(f'–ù–æ–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä')
delete_btn = KeyboardButton(f'‚ùå –£–¥–∞–ª–∞–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
back_messege_btn = KeyboardButton(f'‚óÄÔ∏è –ù–∞–∑–∞–¥')
user_type_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
user_type_kb.add(admin_btn)
user_type_kb.add(delete_btn)
user_type_kb.add(back_messege_btn)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
closet = InlineKeyboardButton(text='üö´ –û—Ç–º–µ–Ω–∞', callback_data='closet')
closet_kb = InlineKeyboardMarkup().add(closet)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è
yes_all_good = InlineKeyboardButton(text='–î–∞. –í—Å–µ –≤–µ—Ä–Ω–æ!', callback_data='yes_all_good')

confirm_kb = InlineKeyboardMarkup().add(yes_all_good)
confirm_kb.add(closet)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–¥–º–∏–Ω–∞
spam_limit = InlineKeyboardButton(text='–õ–∏–º–∏—Ç –ø–æ —Å–ø–∞–º—É', callback_data='spam_limit')
password_work = InlineKeyboardButton(text='–ü–∞—Ä–æ–ª–∏', callback_data='password_work')
change_data_kb = InlineKeyboardMarkup().add(spam_limit)
change_data_kb.add(password_work)
change_data_kb.add(back_btn)

# –î–ê—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
left = InlineKeyboardButton(text='‚¨ÖÔ∏è', callback_data='left')
right = InlineKeyboardButton(text='‚û°Ô∏è', callback_data='right')
upper = InlineKeyboardButton(text='‚¨ÜÔ∏è', callback_data='upper')
down = InlineKeyboardButton(text='‚¨áÔ∏è', callback_data='down')
change_btn = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='change_btn')
delete_btn = InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data='delete_btn')
cut_btn = InlineKeyboardButton(text='–í—ã—Ä–µ–∑–∞—Ç—å', callback_data='cut_btn')
create_menu_btn = InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –º–µ–Ω—é', callback_data='create_menu_btn')

btn_corector_kb = InlineKeyboardMarkup().row(left, upper, down, right)
btn_corector_kb.add(change_btn, delete_btn, cut_btn)


type_post = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø–æ—Å—Ç–∞', callback_data='type_post')
inline_url_kb = InlineKeyboardButton(text='–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ —Å url', callback_data='inline_url_kb')
inline_window_kb = InlineKeyboardButton(text='–ò–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞ —Å –≤—Å–ø–ª. –æ–∫–Ω–æ–º', callback_data='inline_window_kb')
post_type_kb = InlineKeyboardMarkup().add(type_post)
post_type_kb.add(inline_url_kb)
post_type_kb.add(inline_window_kb)
post_type_kb.add(closet)


# –ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
def btn_creator_kb(tg_id: int, index: int = 0, btn_creator: bool = False, active_btn: str = None):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ä–µ–∑–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    btn_cut = sqLite.read_values_by_name(table="admins", data=tg_id, name='cut_btn')[0]
    project = sqLite.read_values_by_name(table='project', id_name='id', data=index)
    builder_kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=10)
    btn_builder = KeyboardButton(f'üéõ –†–µ–¥–∞–∫—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫')
    post_builder = KeyboardButton(f'üìù –†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ—Å—Ç–æ–≤')
    btn_builder_stop = KeyboardButton(f'‚ùå –°—Ç–æ–ø —Ä–µ–¥–∞–∫—Ç–æ—Ä')
    admin_page_btn = KeyboardButton(f'üõ† –ê–¥–º–∏–Ω–∫–∞')
    add_btn = KeyboardButton(f'‚ûï –î–æ–±–∞–≤–∏—Ç—å –ö–Ω–æ–ø–∫—É')
    past_btn = KeyboardButton(f'‚ûï –í—Å—Ç–∞–≤–∏—Ç—å –ö–Ω–æ–ø–∫—É')
    main_post_btn = KeyboardButton(f'üîô –í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é')
    if project[4] is None:
        pass
    else:
        rows = str(project[4]).split('#@#')
        for i in rows:
            if str(i) != '':
                btn_s = str(i).split('@$@')
                number_btns = len(btn_s)
                for k in range(0, number_btns):
                    if str(btn_s[k]) != '':
                        if active_btn is not None:
                            if active_btn == str(btn_s[k]):
                                n = KeyboardButton(f'[{str(btn_s[k])}]')
                                if k == 0:
                                    builder_kb.add(n)
                                else:
                                    builder_kb.insert(n)
                            else:
                                n = KeyboardButton(str(btn_s[k]))
                                if k == 0:
                                    builder_kb.add(n)
                                else:
                                    builder_kb.insert(n)
                        else:
                            n = KeyboardButton(str(btn_s[k]))
                            if k == 0:
                                builder_kb.add(n)
                            else:
                                builder_kb.insert(n)
                    else:
                        pass
            else:
                pass
    if str(btn_cut) == "–Å–Å–Å–Å–Å":
        pass
    else:
        builder_kb.add(past_btn)

    if btn_creator:
        builder_kb.add(add_btn)
        builder_kb.add(main_post_btn, back_messege_btn)
        builder_kb.add(btn_builder_stop, post_builder)
    else:
        builder_kb.add(main_post_btn, back_messege_btn)
        builder_kb.add(btn_builder, admin_page_btn, post_builder)
    return builder_kb


# –ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
def passwords_kb():
    all_pass = str(sqLite.read_all(table='constant')[0][2])
    all_pass = all_pass.split('#‚Ññ#')
    pass_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    add_btn = KeyboardButton(f'‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')
    for i in all_pass:
        if str(i) == '':
            pass
        else:
            i = KeyboardButton(f'{i}')
            pass_kb.insert(i)
    pass_kb.add(add_btn)
    pass_kb.add(back_messege_btn)
    return pass_kb


# –ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
def repl_pass_users_kb(id: int):
    all_pass = str(sqLite.read_all(table='constant')[0][2])
    all_pass = all_pass.split('#‚Ññ#')
    pass_kb = InlineKeyboardMarkup()
    for i in all_pass:
        if str(i) == '':
            pass
        else:
            i = InlineKeyboardButton(text=f'{i}', callback_data=f'pass-{i}%%%{id}')
            pass_kb.insert(i)
    return pass_kb


chat_btn = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç', url='https://t.me/joinchat/HFdNLqQ664UyNWIy')

chat_kb = InlineKeyboardMarkup().add(chat_btn)


# –†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ—Å—Ç–æ–≤
def post_corector_kb(index: int, table: str = 'project'):
    upper_post = InlineKeyboardButton(text='‚¨ÜÔ∏è', callback_data=f'upper_post_{index}#{table}')
    creat_btn_post = InlineKeyboardButton(text='*Ô∏è‚É£', callback_data=f'creat_btn_post_{index}#{table}')
    down_post = InlineKeyboardButton(text='‚¨áÔ∏è', callback_data=f'down_post_{index}#{table}')
    change_btn_post = InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç', callback_data=f'change_btn_post_{index}#{table}')
    delete_btn_post = InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_btn_post_{index}#{table}')
    create_menu_btn_post = InlineKeyboardButton(text='–î–æ–±–∞–≤–∏—Ç—å', callback_data=f'create_menu_btn_post_{index}#{table}')

    post_corector_kb = InlineKeyboardMarkup().row(upper_post, creat_btn_post, down_post)
    post_corector_kb.add(change_btn_post, delete_btn_post, create_menu_btn_post)
    return post_corector_kb


# –ì–ª–∞–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
def post_creator_kb(index: int = 0):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ä–µ–∑–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    project = sqLite.read_values_by_name(table='project', id_name='id', data=index)
    builder_kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=10)

    post_builder = KeyboardButton(f'üìù –†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ—Å—Ç–æ–≤')
    add_btn = KeyboardButton(f'‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç')
    btn_builder = KeyboardButton(f'üéõ –†–µ–¥–∞–∫—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫')
    btn_builder_stop = KeyboardButton(f'‚ùå –°—Ç–æ–ø —Ä–µ–¥–∞–∫—Ç–æ—Ä')
    if project[4] is None:
        pass
    else:
        rows = str(project[4]).split('#@#')
        for i in rows:
            if str(i) != '':
                btn_s = str(i).split('@$@')
                number_btns = len(btn_s)
                for k in range(0, number_btns):
                    if str(btn_s[k]) != '':
                        n = KeyboardButton(str(btn_s[k]))
                        if k == 0:
                            builder_kb.add(n)
                        else:
                            builder_kb.insert(n)
                    else:
                        pass
            else:
                pass

    builder_kb.add(add_btn)
    builder_kb.add(btn_builder, btn_builder_stop)
    return builder_kb


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–∂–Ω–æ–º –º–µ–Ω—é
def user_adaptiv_kb(index: int = 0):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ä–µ–∑–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    project = sqLite.read_values_by_name(table='project', id_name='id', data=index)
    builder_kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=10)
    main_post_btn = KeyboardButton(f'üîô –í–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é')
    if project[4] is None:
        pass
    else:
        rows = str(project[4]).split('#@#')
        for i in rows:
            if str(i) != '':
                btn_s = str(i).split('@$@')
                number_btns = len(btn_s)
                for k in range(0, number_btns):
                    if str(btn_s[k]) != '':
                        n = KeyboardButton(f'{str(btn_s[k])}')
                        if k == 0:
                            builder_kb.add(n)
                        else:
                            builder_kb.insert(n)
                    else:
                        pass
            else:
                pass
    builder_kb.add(main_post_btn, back_messege_btn)

    return builder_kb
